{
  "version": 3,
  "sources": [
    "../node_modules/simplifyify/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "../lib/index.js",
    "../lib/node/path.js",
    "../lib/node/url.js",
    "../lib/omni-path.js",
    "../lib/omni-posix.js",
    "../lib/omni-url.js",
    "../lib/omni-windows.js",
    "../lib/util.js",
    "../node_modules/simplifyify/node_modules/browserify/node_modules/process/browser.js",
    "../node_modules/simplifyify/node_modules/browserify/node_modules/punycode/punycode.js",
    "../node_modules/simplifyify/node_modules/browserify/node_modules/querystring-es3/decode.js",
    "../node_modules/simplifyify/node_modules/browserify/node_modules/querystring-es3/encode.js",
    "../node_modules/simplifyify/node_modules/browserify/node_modules/querystring-es3/index.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/**!\n * OmniPath v1.1.5\n *\n * @link https://github.com/BigstickCarpet/omnipath\n * @license MIT\n */\nmodule.exports = require('./omni-path');\nmodule.exports.Posix = module.exports.posix = require('./omni-posix');\nmodule.exports.Windows = module.exports.windows = module.exports.win32 = require('./omni-windows');\nmodule.exports.Url = module.exports.url = require('./omni-url');\n",
    "/* istanbul ignore next - Don't include native NodeJS code in code-coverage */\n(function() {\n  'use strict';\n\n  var path = require('path');\n\n  if (path.posix && path.windows) {\n    // We're running in Node v0.12+, so use the built-in \"path\" module\n    module.exports = path;\n    return;\n  }\n\n  // On older versions of Node and Browserify, use the following code instead of the built-in \"path\" module.\n  // This code is direct copy of the \"path\" module from Node v0.12\n  // https://github.com/joyent/node/blob/master/lib/path.js\n\n  // Copyright Joyent, Inc. and other Node contributors.\n  //\n  // Permission is hereby granted, free of charge, to any person obtaining a\n  // copy of this software and associated documentation files (the\n  // \"Software\"), to deal in the Software without restriction, including\n  // without limitation the rights to use, copy, modify, merge, publish,\n  // distribute, sublicense, and/or sell copies of the Software, and to permit\n  // persons to whom the Software is furnished to do so, subject to the\n  // following conditions:\n  //\n  // The above copyright notice and this permission notice shall be included\n  // in all copies or substantial portions of the Software.\n  //\n  // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n  var isWindows = process.platform === 'win32';\n  var util = require('../util');\n\n\n  // resolves . and .. elements in a path array with directory names there\n  // must be no slashes or device names (c:\\) in the array\n  // (so also no leading and trailing slashes - it does not distinguish\n  // relative and absolute paths)\n  function normalizeArray(parts, allowAboveRoot) {\n    var res = [];\n    for (var i = 0; i < parts.length; i++) {\n      var p = parts[i];\n\n      // ignore empty parts\n      if (!p || p === '.')\n        continue;\n\n      if (p === '..') {\n        if (res.length && res[res.length - 1] !== '..') {\n          res.pop();\n        } else if (allowAboveRoot) {\n          res.push('..');\n        }\n      } else {\n        res.push(p);\n      }\n    }\n\n    return res;\n  }\n\n  // returns an array with empty elements removed from either end of the input\n  // array or the original array if no elements need to be removed\n  function trimArray(arr) {\n    var lastIndex = arr.length - 1;\n    var start = 0;\n    for (; start <= lastIndex; start++) {\n      if (arr[start])\n        break;\n    }\n\n    var end = lastIndex;\n    for (; end >= 0; end--) {\n      if (arr[end])\n        break;\n    }\n\n    if (start === 0 && end === lastIndex)\n      return arr;\n    if (start > end)\n      return [];\n    return arr.slice(start, end + 1);\n  }\n\n  // Regex to split a windows path into three parts: [*, device, slash,\n  // tail] windows-only\n  var splitDeviceRe =\n      /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\n\n  // Regex to split the tail part of the above into [*, dir, basename, ext]\n  var splitTailRe =\n      /^([\\s\\S]*?)((?:\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))(?:[\\\\\\/]*)$/;\n\n  var win32 = {};\n\n  // Function to split a filename into [root, dir, basename, ext]\n  function win32SplitPath(filename) {\n    // Separate device+slash from tail\n    var result = splitDeviceRe.exec(filename),\n        device = (result[1] || '') + (result[2] || ''),\n        tail = result[3] || '';\n    // Split the tail into dir, basename and extension\n    var result2 = splitTailRe.exec(tail),\n        dir = result2[1],\n        basename = result2[2],\n        ext = result2[3];\n    return [device, dir, basename, ext];\n  }\n\n  function win32StatPath(path) {\n    var result = splitDeviceRe.exec(path),\n        device = result[1] || '',\n        isUnc = !!device && device[1] !== ':';\n    return {\n      device: device,\n      isUnc: isUnc,\n      isAbsolute: isUnc || !!result[2], // UNC paths are always absolute\n      tail: result[3]\n    };\n  }\n\n  function normalizeUNCRoot(device) {\n    return '\\\\\\\\' + device.replace(/^[\\\\\\/]+/, '').replace(/[\\\\\\/]+/g, '\\\\');\n  }\n\n  // path.resolve([from ...], to)\n  win32.resolve = function() {\n    var resolvedDevice = '',\n        resolvedTail = '',\n        resolvedAbsolute = false;\n\n    for (var i = arguments.length - 1; i >= -1; i--) {\n      var path;\n      if (i >= 0) {\n        path = arguments[i];\n      } else if (!resolvedDevice) {\n        path = process.cwd();\n      } else {\n        // Windows has the concept of drive-specific current working\n        // directories. If we've resolved a drive letter but not yet an\n        // absolute path, get cwd for that drive. We're sure the device is not\n        // an unc path at this points, because unc paths are always absolute.\n        path = process.env['=' + resolvedDevice];\n        // Verify that a drive-local cwd was found and that it actually points\n        // to our drive. If not, default to the drive's root.\n        if (!path || path.substr(0, 3).toLowerCase() !==\n            resolvedDevice.toLowerCase() + '\\\\') {\n          path = resolvedDevice + '\\\\';\n        }\n      }\n\n      // Skip empty and invalid entries\n      if (!util.isString(path)) {\n        throw new TypeError('Arguments to path.resolve must be strings');\n      } else if (!path) {\n        continue;\n      }\n\n      var result = win32StatPath(path),\n          device = result.device,\n          isUnc = result.isUnc,\n          isAbsolute = result.isAbsolute,\n          tail = result.tail;\n\n      if (device &&\n          resolvedDevice &&\n          device.toLowerCase() !== resolvedDevice.toLowerCase()) {\n        // This path points to another device so it is not applicable\n        continue;\n      }\n\n      if (!resolvedDevice) {\n        resolvedDevice = device;\n      }\n      if (!resolvedAbsolute) {\n        resolvedTail = tail + '\\\\' + resolvedTail;\n        resolvedAbsolute = isAbsolute;\n      }\n\n      if (resolvedDevice && resolvedAbsolute) {\n        break;\n      }\n    }\n\n    // Convert slashes to backslashes when `resolvedDevice` points to an UNC\n    // root. Also squash multiple slashes into a single one where appropriate.\n    if (isUnc) {\n      resolvedDevice = normalizeUNCRoot(resolvedDevice);\n    }\n\n    // At this point the path should be resolved to a full absolute path,\n    // but handle relative paths to be safe (might happen when process.cwd()\n    // fails)\n\n    // Normalize the tail path\n    resolvedTail = normalizeArray(resolvedTail.split(/[\\\\\\/]+/),\n                                  !resolvedAbsolute).join('\\\\');\n\n    return (resolvedDevice + (resolvedAbsolute ? '\\\\' : '') + resolvedTail) ||\n           '.';\n  };\n\n\n  win32.normalize = function(path) {\n    var result = win32StatPath(path),\n        device = result.device,\n        isUnc = result.isUnc,\n        isAbsolute = result.isAbsolute,\n        tail = result.tail,\n        trailingSlash = /[\\\\\\/]$/.test(tail);\n\n    // Normalize the tail path\n    tail = normalizeArray(tail.split(/[\\\\\\/]+/), !isAbsolute).join('\\\\');\n\n    if (!tail && !isAbsolute) {\n      tail = '.';\n    }\n    if (tail && trailingSlash) {\n      tail += '\\\\';\n    }\n\n    // Convert slashes to backslashes when `device` points to an UNC root.\n    // Also squash multiple slashes into a single one where appropriate.\n    if (isUnc) {\n      device = normalizeUNCRoot(device);\n    }\n\n    return device + (isAbsolute ? '\\\\' : '') + tail;\n  };\n\n\n  win32.isAbsolute = function(path) {\n    return win32StatPath(path).isAbsolute;\n  };\n\n  win32.join = function() {\n    var paths = [];\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!util.isString(arg)) {\n        throw new TypeError('Arguments to path.join must be strings');\n      }\n      if (arg) {\n        paths.push(arg);\n      }\n    }\n\n    var joined = paths.join('\\\\');\n\n    // Make sure that the joined path doesn't start with two slashes, because\n    // normalize() will mistake it for an UNC path then.\n    //\n    // This step is skipped when it is very clear that the user actually\n    // intended to point at an UNC path. This is assumed when the first\n    // non-empty string arguments starts with exactly two slashes followed by\n    // at least one more non-slash character.\n    //\n    // Note that for normalize() to treat a path as an UNC path it needs to\n    // have at least 2 components, so we don't filter for that here.\n    // This means that the user can use join to construct UNC paths from\n    // a server name and a share name; for example:\n    //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\')\n    if (!/^[\\\\\\/]{2}[^\\\\\\/]/.test(paths[0])) {\n      joined = joined.replace(/^[\\\\\\/]{2,}/, '\\\\');\n    }\n\n    return win32.normalize(joined);\n  };\n\n\n  // path.relative(from, to)\n  // it will solve the relative path from 'from' to 'to', for instance:\n  // from = 'C:\\\\orandea\\\\test\\\\aaa'\n  // to = 'C:\\\\orandea\\\\impl\\\\bbb'\n  // The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\n  win32.relative = function(from, to) {\n    from = win32.resolve(from);\n    to = win32.resolve(to);\n\n    // windows is not case sensitive\n    var lowerFrom = from.toLowerCase();\n    var lowerTo = to.toLowerCase();\n\n    var toParts = trimArray(to.split('\\\\'));\n\n    var lowerFromParts = trimArray(lowerFrom.split('\\\\'));\n    var lowerToParts = trimArray(lowerTo.split('\\\\'));\n\n    var length = Math.min(lowerFromParts.length, lowerToParts.length);\n    var samePartsLength = length;\n    for (var i = 0; i < length; i++) {\n      if (lowerFromParts[i] !== lowerToParts[i]) {\n        samePartsLength = i;\n        break;\n      }\n    }\n\n    if (samePartsLength == 0) {\n      return to;\n    }\n\n    var outputParts = [];\n    for (var i = samePartsLength; i < lowerFromParts.length; i++) {\n      outputParts.push('..');\n    }\n\n    outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n    return outputParts.join('\\\\');\n  };\n\n\n  win32._makeLong = function(path) {\n    // Note: this will *probably* throw somewhere.\n    if (!util.isString(path))\n      return path;\n\n    if (!path) {\n      return '';\n    }\n\n    var resolvedPath = win32.resolve(path);\n\n    if (/^[a-zA-Z]\\:\\\\/.test(resolvedPath)) {\n      // path is local filesystem path, which needs to be converted\n      // to long UNC path.\n      return '\\\\\\\\?\\\\' + resolvedPath;\n    } else if (/^\\\\\\\\[^?.]/.test(resolvedPath)) {\n      // path is network UNC path, which needs to be converted\n      // to long UNC path.\n      return '\\\\\\\\?\\\\UNC\\\\' + resolvedPath.substring(2);\n    }\n\n    return path;\n  };\n\n\n  win32.dirname = function(path) {\n    var result = win32SplitPath(path),\n        root = result[0],\n        dir = result[1];\n\n    if (!root && !dir) {\n      // No dirname whatsoever\n      return '.';\n    }\n\n    if (dir) {\n      // It has a dirname, strip trailing slash\n      dir = dir.substr(0, dir.length - 1);\n    }\n\n    return root + dir;\n  };\n\n\n  win32.basename = function(path, ext) {\n    var f = win32SplitPath(path)[2];\n    // TODO: make this comparison case-insensitive on windows?\n    if (ext && f.substr(-1 * ext.length) === ext) {\n      f = f.substr(0, f.length - ext.length);\n    }\n    return f;\n  };\n\n\n  win32.extname = function(path) {\n    return win32SplitPath(path)[3];\n  };\n\n\n  win32.format = function(pathObject) {\n    if (!util.isObject(pathObject)) {\n      throw new TypeError(\n          \"Parameter 'pathObject' must be an object, not \" + typeof pathObject\n      );\n    }\n\n    var root = pathObject.root || '';\n\n    if (!util.isString(root)) {\n      throw new TypeError(\n          \"'pathObject.root' must be a string or undefined, not \" +\n          typeof pathObject.root\n      );\n    }\n\n    var dir = pathObject.dir;\n    var base = pathObject.base || '';\n    if (!dir) {\n      return base;\n    }\n    if (dir[dir.length - 1] === win32.sep) {\n      return dir + base;\n    }\n    return dir + win32.sep + base;\n  };\n\n\n  win32.parse = function(pathString) {\n    if (!util.isString(pathString)) {\n      throw new TypeError(\n          \"Parameter 'pathString' must be a string, not \" + typeof pathString\n      );\n    }\n    var allParts = win32SplitPath(pathString);\n    if (!allParts || allParts.length !== 4) {\n      throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n    }\n    return {\n      root: allParts[0],\n      dir: allParts[0] + allParts[1].slice(0, -1),\n      base: allParts[2],\n      ext: allParts[3],\n      name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\n    };\n  };\n\n\n  win32.sep = '\\\\';\n  win32.delimiter = ';';\n\n\n  // Split a filename into [root, dir, basename, ext], unix version\n  // 'root' is just a slash, or nothing.\n  var splitPathRe =\n      /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n  var posix = {};\n\n\n  function posixSplitPath(filename) {\n    return splitPathRe.exec(filename).slice(1);\n  }\n\n\n  // path.resolve([from ...], to)\n  // posix version\n  posix.resolve = function() {\n    var resolvedPath = '',\n        resolvedAbsolute = false;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path = (i >= 0) ? arguments[i] : process.cwd();\n\n      // Skip empty and invalid entries\n      if (!util.isString(path)) {\n        throw new TypeError('Arguments to path.resolve must be strings');\n      } else if (!path) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path[0] === '/';\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeArray(resolvedPath.split('/'),\n                                  !resolvedAbsolute).join('/');\n\n    return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n  };\n\n  // path.normalize(path)\n  // posix version\n  posix.normalize = function(path) {\n    var isAbsolute = posix.isAbsolute(path),\n        trailingSlash = path && path[path.length - 1] === '/';\n\n    // Normalize the path\n    path = normalizeArray(path.split('/'), !isAbsolute).join('/');\n\n    if (!path && !isAbsolute) {\n      path = '.';\n    }\n    if (path && trailingSlash) {\n      path += '/';\n    }\n\n    return (isAbsolute ? '/' : '') + path;\n  };\n\n  // posix version\n  posix.isAbsolute = function(path) {\n    return path.charAt(0) === '/';\n  };\n\n  // posix version\n  posix.join = function() {\n    var path = '';\n    for (var i = 0; i < arguments.length; i++) {\n      var segment = arguments[i];\n      if (!util.isString(segment)) {\n        throw new TypeError('Arguments to path.join must be strings');\n      }\n      if (segment) {\n        if (!path) {\n          path += segment;\n        } else {\n          path += '/' + segment;\n        }\n      }\n    }\n    return posix.normalize(path);\n  };\n\n\n  // path.relative(from, to)\n  // posix version\n  posix.relative = function(from, to) {\n    from = posix.resolve(from).substr(1);\n    to = posix.resolve(to).substr(1);\n\n    var fromParts = trimArray(from.split('/'));\n    var toParts = trimArray(to.split('/'));\n\n    var length = Math.min(fromParts.length, toParts.length);\n    var samePartsLength = length;\n    for (var i = 0; i < length; i++) {\n      if (fromParts[i] !== toParts[i]) {\n        samePartsLength = i;\n        break;\n      }\n    }\n\n    var outputParts = [];\n    for (var i = samePartsLength; i < fromParts.length; i++) {\n      outputParts.push('..');\n    }\n\n    outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n    return outputParts.join('/');\n  };\n\n\n  posix._makeLong = function(path) {\n    return path;\n  };\n\n\n  posix.dirname = function(path) {\n    var result = posixSplitPath(path),\n        root = result[0],\n        dir = result[1];\n\n    if (!root && !dir) {\n      // No dirname whatsoever\n      return '.';\n    }\n\n    if (dir) {\n      // It has a dirname, strip trailing slash\n      dir = dir.substr(0, dir.length - 1);\n    }\n\n    return root + dir;\n  };\n\n\n  posix.basename = function(path, ext) {\n    var f = posixSplitPath(path)[2];\n    // TODO: make this comparison case-insensitive on windows?\n    if (ext && f.substr(-1 * ext.length) === ext) {\n      f = f.substr(0, f.length - ext.length);\n    }\n    return f;\n  };\n\n\n  posix.extname = function(path) {\n    return posixSplitPath(path)[3];\n  };\n\n\n  posix.format = function(pathObject) {\n    if (!util.isObject(pathObject)) {\n      throw new TypeError(\n          \"Parameter 'pathObject' must be an object, not \" + typeof pathObject\n      );\n    }\n\n    var root = pathObject.root || '';\n\n    if (!util.isString(root)) {\n      throw new TypeError(\n          \"'pathObject.root' must be a string or undefined, not \" +\n          typeof pathObject.root\n      );\n    }\n\n    var dir = pathObject.dir ? pathObject.dir + posix.sep : '';\n    var base = pathObject.base || '';\n    return dir + base;\n  };\n\n\n  posix.parse = function(pathString) {\n    if (!util.isString(pathString)) {\n      throw new TypeError(\n          \"Parameter 'pathString' must be a string, not \" + typeof pathString\n      );\n    }\n    var allParts = posixSplitPath(pathString);\n    if (!allParts || allParts.length !== 4) {\n      throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n    }\n    allParts[1] = allParts[1] || '';\n    allParts[2] = allParts[2] || '';\n    allParts[3] = allParts[3] || '';\n\n    return {\n      root: allParts[0],\n      dir: allParts[0] + allParts[1].slice(0, -1),\n      base: allParts[2],\n      ext: allParts[3],\n      name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\n    };\n  };\n\n\n  posix.sep = '/';\n  posix.delimiter = ':';\n\n\n  if (isWindows)\n    module.exports = win32;\n  else /* posix */\n    module.exports = posix;\n\n  module.exports.posix = posix;\n  module.exports.win32 = win32;\n\n})();\n",
    "/* istanbul ignore next - Don't include native NodeJS code in code-coverage */\n(function() {\n  'use strict';\n\n  var path = require('path');\n\n  if (path.posix && path.windows) {\n    // We're running in Node v0.12+, so use the built-in \"url\" module\n    module.exports = require('url');\n    return;\n  }\n\n  // On older versions of Node and Browserify, use the following code instead of the built-in \"url\" module.\n  // This code is direct copy of the \"url\" module from Node v0.12\n  // https://github.com/joyent/node/blob/master/lib/url.js\n\n  // Copyright Joyent, Inc. and other Node contributors.\n  //\n  // Permission is hereby granted, free of charge, to any person obtaining a\n  // copy of this software and associated documentation files (the\n  // \"Software\"), to deal in the Software without restriction, including\n  // without limitation the rights to use, copy, modify, merge, publish,\n  // distribute, sublicense, and/or sell copies of the Software, and to permit\n  // persons to whom the Software is furnished to do so, subject to the\n  // following conditions:\n  //\n  // The above copyright notice and this permission notice shall be included\n  // in all copies or substantial portions of the Software.\n  //\n  // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n  var punycode = require('punycode');\n  var util = require('../util');\n\n  exports.parse = urlParse;\n  exports.resolve = urlResolve;\n  exports.resolveObject = urlResolveObject;\n  exports.format = urlFormat;\n\n  exports.Url = Url;\n\n  function Url() {\n    this.protocol = null;\n    this.slashes = null;\n    this.auth = null;\n    this.host = null;\n    this.port = null;\n    this.hostname = null;\n    this.hash = null;\n    this.search = null;\n    this.query = null;\n    this.pathname = null;\n    this.path = null;\n    this.href = null;\n  }\n\n  // Reference: RFC 3986, RFC 1808, RFC 2396\n\n  // define these here so at least they only have to be\n  // compiled once on the first module load.\n  var protocolPattern = /^([a-z0-9.+-]+:)/i,\n      portPattern = /:[0-9]*$/,\n\n      // Special case for a simple path URL\n      simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n      // RFC 2396: characters reserved for delimiting URLs.\n      // We actually just auto-escape these.\n      delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n      // RFC 2396: characters not allowed for various reasons.\n      unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n      // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n      autoEscape = ['\\''].concat(unwise),\n      // Characters that are never ever allowed in a hostname.\n      // Note that any invalid chars are also handled, but these\n      // are the ones that are *expected* to be seen, so we fast-path\n      // them.\n      nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n      hostEndingChars = ['/', '?', '#'],\n      hostnameMaxLen = 255,\n      hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n      hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n      // protocols that can allow \"unsafe\" and \"unwise\" chars.\n      unsafeProtocol = {\n        'javascript': true,\n        'javascript:': true\n      },\n      // protocols that never have a hostname.\n      hostlessProtocol = {\n        'javascript': true,\n        'javascript:': true\n      },\n      // protocols that always contain a // bit.\n      slashedProtocol = {\n        'http': true,\n        'https': true,\n        'ftp': true,\n        'gopher': true,\n        'file': true,\n        'http:': true,\n        'https:': true,\n        'ftp:': true,\n        'gopher:': true,\n        'file:': true\n      },\n      querystring = require('querystring');\n\n  function urlParse(url, parseQueryString, slashesDenoteHost) {\n    if (url && util.isObject(url) && url instanceof Url) return url;\n\n    var u = new Url;\n    u.parse(url, parseQueryString, slashesDenoteHost);\n    return u;\n  }\n\n  Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n    if (!util.isString(url)) {\n      throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n    }\n\n    // Copy chrome, IE, opera backslash-handling behavior.\n    // Back slashes before the query string get converted to forward slashes\n    // See: https://code.google.com/p/chromium/issues/detail?id=25916\n    var queryIndex = url.indexOf('?'),\n        splitter =\n            (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n        uSplit = url.split(splitter),\n        slashRegex = /\\\\/g;\n    uSplit[0] = uSplit[0].replace(slashRegex, '/');\n    url = uSplit.join(splitter);\n\n    var rest = url;\n\n    // trim before proceeding.\n    // This is to support parse stuff like \"  http://foo.com  \\n\"\n    rest = rest.trim();\n\n    if (!slashesDenoteHost && url.split('#').length === 1) {\n      // Try fast path regexp\n      var simplePath = simplePathPattern.exec(rest);\n      if (simplePath) {\n        this.path = rest;\n        this.href = rest;\n        this.pathname = simplePath[1];\n        if (simplePath[2]) {\n          this.search = simplePath[2];\n          if (parseQueryString) {\n            this.query = querystring.parse(this.search.substr(1));\n          } else {\n            this.query = this.search.substr(1);\n          }\n        } else if (parseQueryString) {\n          this.search = '';\n          this.query = {};\n        }\n        return this;\n      }\n    }\n\n    var proto = protocolPattern.exec(rest);\n    if (proto) {\n      proto = proto[0];\n      var lowerProto = proto.toLowerCase();\n      this.protocol = lowerProto;\n      rest = rest.substr(proto.length);\n    }\n\n    // figure out if it's got a host\n    // user@server is *always* interpreted as a hostname, and url\n    // resolution will treat //foo/bar as host=foo,path=bar because that's\n    // how the browser resolves relative URLs.\n    if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n      var slashes = rest.substr(0, 2) === '//';\n      if (slashes && !(proto && hostlessProtocol[proto])) {\n        rest = rest.substr(2);\n        this.slashes = true;\n      }\n    }\n\n    if (!hostlessProtocol[proto] &&\n        (slashes || (proto && !slashedProtocol[proto]))) {\n\n      // there's a hostname.\n      // the first instance of /, ?, ;, or # ends the host.\n      //\n      // If there is an @ in the hostname, then non-host chars *are* allowed\n      // to the left of the last @ sign, unless some host-ending character\n      // comes *before* the @-sign.\n      // URLs are obnoxious.\n      //\n      // ex:\n      // http://a@b@c/ => user:a@b host:c\n      // http://a@b?@c => user:a host:c path:/?@c\n\n      // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n      // Review our test case against browsers more comprehensively.\n\n      // find the first instance of any hostEndingChars\n      var hostEnd = -1;\n      for (var i = 0; i < hostEndingChars.length; i++) {\n        var hec = rest.indexOf(hostEndingChars[i]);\n        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n          hostEnd = hec;\n      }\n\n      // at this point, either we have an explicit point where the\n      // auth portion cannot go past, or the last @ char is the decider.\n      var auth, atSign;\n      if (hostEnd === -1) {\n        // atSign can be anywhere.\n        atSign = rest.lastIndexOf('@');\n      } else {\n        // atSign must be in auth portion.\n        // http://a@b/c@d => host:b auth:a path:/c@d\n        atSign = rest.lastIndexOf('@', hostEnd);\n      }\n\n      // Now we have a portion which is definitely the auth.\n      // Pull that off.\n      if (atSign !== -1) {\n        auth = rest.slice(0, atSign);\n        rest = rest.slice(atSign + 1);\n        this.auth = decodeURIComponent(auth);\n      }\n\n      // the host is the remaining to the left of the first non-host char\n      hostEnd = -1;\n      for (var i = 0; i < nonHostChars.length; i++) {\n        var hec = rest.indexOf(nonHostChars[i]);\n        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n          hostEnd = hec;\n      }\n      // if we still have not hit it, then the entire thing is a host.\n      if (hostEnd === -1)\n        hostEnd = rest.length;\n\n      this.host = rest.slice(0, hostEnd);\n      rest = rest.slice(hostEnd);\n\n      // pull out port.\n      this.parseHost();\n\n      // we've indicated that there is a hostname,\n      // so even if it's empty, it has to be present.\n      this.hostname = this.hostname || '';\n\n      // if hostname begins with [ and ends with ]\n      // assume that it's an IPv6 address.\n      var ipv6Hostname = this.hostname[0] === '[' &&\n          this.hostname[this.hostname.length - 1] === ']';\n\n      // validate a little.\n      if (!ipv6Hostname) {\n        var hostparts = this.hostname.split(/\\./);\n        for (var i = 0, l = hostparts.length; i < l; i++) {\n          var part = hostparts[i];\n          if (!part) continue;\n          if (!part.match(hostnamePartPattern)) {\n            var newpart = '';\n            for (var j = 0, k = part.length; j < k; j++) {\n              if (part.charCodeAt(j) > 127) {\n                // we replace non-ASCII char with a temporary placeholder\n                // we need this to make sure size of hostname is not\n                // broken by replacing non-ASCII by nothing\n                newpart += 'x';\n              } else {\n                newpart += part[j];\n              }\n            }\n            // we test again with ASCII char only\n            if (!newpart.match(hostnamePartPattern)) {\n              var validParts = hostparts.slice(0, i);\n              var notHost = hostparts.slice(i + 1);\n              var bit = part.match(hostnamePartStart);\n              if (bit) {\n                validParts.push(bit[1]);\n                notHost.unshift(bit[2]);\n              }\n              if (notHost.length) {\n                rest = '/' + notHost.join('.') + rest;\n              }\n              this.hostname = validParts.join('.');\n              break;\n            }\n          }\n        }\n      }\n\n      if (this.hostname.length > hostnameMaxLen) {\n        this.hostname = '';\n      } else {\n        // hostnames are always lower case.\n        this.hostname = this.hostname.toLowerCase();\n      }\n\n      if (!ipv6Hostname) {\n        // IDNA Support: Returns a punycoded representation of \"domain\".\n        // It only converts parts of the domain name that\n        // have non-ASCII characters, i.e. it doesn't matter if\n        // you call it with a domain that already is ASCII-only.\n        this.hostname = punycode.toASCII(this.hostname);\n      }\n\n      var p = this.port ? ':' + this.port : '';\n      var h = this.hostname || '';\n      this.host = h + p;\n      this.href += this.host;\n\n      // strip [ and ] from the hostname\n      // the host field still retains them, though\n      if (ipv6Hostname) {\n        this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n        if (rest[0] !== '/') {\n          rest = '/' + rest;\n        }\n      }\n    }\n\n    // now rest is set to the post-host stuff.\n    // chop off any delim chars.\n    if (!unsafeProtocol[lowerProto]) {\n\n      // First, make 100% sure that any \"autoEscape\" chars get\n      // escaped, even if encodeURIComponent doesn't think they\n      // need to be.\n      for (var i = 0, l = autoEscape.length; i < l; i++) {\n        var ae = autoEscape[i];\n        if (rest.indexOf(ae) === -1)\n          continue;\n        var esc = encodeURIComponent(ae);\n        if (esc === ae) {\n          esc = escape(ae);\n        }\n        rest = rest.split(ae).join(esc);\n      }\n    }\n\n\n    // chop off from the tail first.\n    var hash = rest.indexOf('#');\n    if (hash !== -1) {\n      // got a fragment string.\n      this.hash = rest.substr(hash);\n      rest = rest.slice(0, hash);\n    }\n    var qm = rest.indexOf('?');\n    if (qm !== -1) {\n      this.search = rest.substr(qm);\n      this.query = rest.substr(qm + 1);\n      if (parseQueryString) {\n        this.query = querystring.parse(this.query);\n      }\n      rest = rest.slice(0, qm);\n    } else if (parseQueryString) {\n      // no query string, but parseQueryString still requested\n      this.search = '';\n      this.query = {};\n    }\n    if (rest) this.pathname = rest;\n    if (slashedProtocol[lowerProto] &&\n        this.hostname && !this.pathname) {\n      this.pathname = '/';\n    }\n\n    //to support http.request\n    if (this.pathname || this.search) {\n      var p = this.pathname || '';\n      var s = this.search || '';\n      this.path = p + s;\n    }\n\n    // finally, reconstruct the href based on what has been validated.\n    this.href = this.format();\n    return this;\n  };\n\n  // format a parsed object into a url string\n  function urlFormat(obj) {\n    // ensure it's an object, and not a string url.\n    // If it's an obj, this is a no-op.\n    // this way, you can call url_format() on strings\n    // to clean up potentially wonky urls.\n    if (util.isString(obj)) obj = urlParse(obj);\n    if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n    return obj.format();\n  }\n\n  Url.prototype.format = function() {\n    var auth = this.auth || '';\n    if (auth) {\n      auth = encodeURIComponent(auth);\n      auth = auth.replace(/%3A/i, ':');\n      auth += '@';\n    }\n\n    var protocol = this.protocol || '',\n        pathname = this.pathname || '',\n        hash = this.hash || '',\n        host = false,\n        query = '';\n\n    if (this.host) {\n      host = auth + this.host;\n    } else if (this.hostname) {\n      host = auth + (this.hostname.indexOf(':') === -1 ?\n          this.hostname :\n          '[' + this.hostname + ']');\n      if (this.port) {\n        host += ':' + this.port;\n      }\n    }\n\n    if (this.query &&\n        util.isObject(this.query) &&\n        Object.keys(this.query).length) {\n      query = querystring.stringify(this.query);\n    }\n\n    var search = this.search || (query && ('?' + query)) || '';\n\n    if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n    // unless they had them to begin with.\n    if (this.slashes ||\n        (!protocol || slashedProtocol[protocol]) && host !== false) {\n      host = '//' + (host || '');\n      if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n    } else if (!host) {\n      host = '';\n    }\n\n    if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n    if (search && search.charAt(0) !== '?') search = '?' + search;\n\n    pathname = pathname.replace(/[?#]/g, function(match) {\n      return encodeURIComponent(match);\n    });\n    search = search.replace('#', '%23');\n\n    return protocol + host + pathname + search + hash;\n  };\n\n  function urlResolve(source, relative) {\n    return urlParse(source, false, true).resolve(relative);\n  }\n\n  Url.prototype.resolve = function(relative) {\n    return this.resolveObject(urlParse(relative, false, true)).format();\n  };\n\n  function urlResolveObject(source, relative) {\n    if (!source) return relative;\n    return urlParse(source, false, true).resolveObject(relative);\n  }\n\n  Url.prototype.resolveObject = function(relative) {\n    if (util.isString(relative)) {\n      var rel = new Url();\n      rel.parse(relative, false, true);\n      relative = rel;\n    }\n\n    var result = new Url();\n    var tkeys = Object.keys(this);\n    for (var tk = 0; tk < tkeys.length; tk++) {\n      var tkey = tkeys[tk];\n      result[tkey] = this[tkey];\n    }\n\n    // hash is always overridden, no matter what.\n    // even href=\"\" will remove it.\n    result.hash = relative.hash;\n\n    // if the relative url is empty, then there's nothing left to do here.\n    if (relative.href === '') {\n      result.href = result.format();\n      return result;\n    }\n\n    // hrefs like //foo/bar always cut to the protocol.\n    if (relative.slashes && !relative.protocol) {\n      // take everything except the protocol from relative\n      var rkeys = Object.keys(relative);\n      for (var rk = 0; rk < rkeys.length; rk++) {\n        var rkey = rkeys[rk];\n        if (rkey !== 'protocol')\n          result[rkey] = relative[rkey];\n      }\n\n      //urlParse appends trailing / to urls like http://www.example.com\n      if (slashedProtocol[result.protocol] &&\n          result.hostname && !result.pathname) {\n        result.path = result.pathname = '/';\n      }\n\n      result.href = result.format();\n      return result;\n    }\n\n    if (relative.protocol && relative.protocol !== result.protocol) {\n      // if it's a known url protocol, then changing\n      // the protocol does weird things\n      // first, if it's not file:, then we MUST have a host,\n      // and if there was a path\n      // to begin with, then we MUST have a path.\n      // if it is file:, then the host is dropped,\n      // because that's known to be hostless.\n      // anything else is assumed to be absolute.\n      if (!slashedProtocol[relative.protocol]) {\n        var keys = Object.keys(relative);\n        for (var v = 0; v < keys.length; v++) {\n          var k = keys[v];\n          result[k] = relative[k];\n        }\n        result.href = result.format();\n        return result;\n      }\n\n      result.protocol = relative.protocol;\n      if (!relative.host && !hostlessProtocol[relative.protocol]) {\n        var relPath = (relative.pathname || '').split('/');\n        while (relPath.length && !(relative.host = relPath.shift()));\n        if (!relative.host) relative.host = '';\n        if (!relative.hostname) relative.hostname = '';\n        if (relPath[0] !== '') relPath.unshift('');\n        if (relPath.length < 2) relPath.unshift('');\n        result.pathname = relPath.join('/');\n      } else {\n        result.pathname = relative.pathname;\n      }\n      result.search = relative.search;\n      result.query = relative.query;\n      result.host = relative.host || '';\n      result.auth = relative.auth;\n      result.hostname = relative.hostname || relative.host;\n      result.port = relative.port;\n      // to support http.request\n      if (result.pathname || result.search) {\n        var p = result.pathname || '';\n        var s = result.search || '';\n        result.path = p + s;\n      }\n      result.slashes = result.slashes || relative.slashes;\n      result.href = result.format();\n      return result;\n    }\n\n    var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n        isRelAbs = (\n            relative.host ||\n            relative.pathname && relative.pathname.charAt(0) === '/'\n        ),\n        mustEndAbs = (isRelAbs || isSourceAbs ||\n                      (result.host && relative.pathname)),\n        removeAllDots = mustEndAbs,\n        srcPath = result.pathname && result.pathname.split('/') || [],\n        relPath = relative.pathname && relative.pathname.split('/') || [],\n        psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n    // if the url is a non-slashed url, then relative\n    // links like ../.. should be able\n    // to crawl up to the hostname, as well.  This is strange.\n    // result.protocol has already been set by now.\n    // Later on, put the first path part into the host field.\n    if (psychotic) {\n      result.hostname = '';\n      result.port = null;\n      if (result.host) {\n        if (srcPath[0] === '') srcPath[0] = result.host;\n        else srcPath.unshift(result.host);\n      }\n      result.host = '';\n      if (relative.protocol) {\n        relative.hostname = null;\n        relative.port = null;\n        if (relative.host) {\n          if (relPath[0] === '') relPath[0] = relative.host;\n          else relPath.unshift(relative.host);\n        }\n        relative.host = null;\n      }\n      mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n    }\n\n    if (isRelAbs) {\n      // it's absolute.\n      result.host = (relative.host || relative.host === '') ?\n                    relative.host : result.host;\n      result.hostname = (relative.hostname || relative.hostname === '') ?\n                        relative.hostname : result.hostname;\n      result.search = relative.search;\n      result.query = relative.query;\n      srcPath = relPath;\n      // fall through to the dot-handling below.\n    } else if (relPath.length) {\n      // it's relative\n      // throw away the existing file, and take the new path instead.\n      if (!srcPath) srcPath = [];\n      srcPath.pop();\n      srcPath = srcPath.concat(relPath);\n      result.search = relative.search;\n      result.query = relative.query;\n    } else if (!util.isNullOrUndefined(relative.search)) {\n      // just pull out the search.\n      // like href='?foo'.\n      // Put this after the other two cases because it simplifies the booleans\n      if (psychotic) {\n        result.hostname = result.host = srcPath.shift();\n        //occationaly the auth can get stuck only in host\n        //this especialy happens in cases like\n        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n        var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                         result.host.split('@') : false;\n        if (authInHost) {\n          result.auth = authInHost.shift();\n          result.host = result.hostname = authInHost.shift();\n        }\n      }\n      result.search = relative.search;\n      result.query = relative.query;\n      //to support http.request\n      if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n        result.path = (result.pathname ? result.pathname : '') +\n                      (result.search ? result.search : '');\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    if (!srcPath.length) {\n      // no path at all.  easy.\n      // we've already handled the other stuff above.\n      result.pathname = null;\n      //to support http.request\n      if (result.search) {\n        result.path = '/' + result.search;\n      } else {\n        result.path = null;\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    // if a url ENDs in . or .., then it must get a trailing slash.\n    // however, if it ends in anything else non-slashy,\n    // then it must NOT get a trailing slash.\n    var last = srcPath.slice(-1)[0];\n    var hasTrailingSlash = (\n        (result.host || relative.host) && (last === '.' || last === '..') ||\n        last === '');\n\n    // strip single dots, resolve double dots to parent dir\n    // if the path tries to go above the root, `up` ends up > 0\n    var up = 0;\n    for (var i = srcPath.length; i >= 0; i--) {\n      last = srcPath[i];\n      if (last === '.') {\n        srcPath.splice(i, 1);\n      } else if (last === '..') {\n        srcPath.splice(i, 1);\n        up++;\n      } else if (up) {\n        srcPath.splice(i, 1);\n        up--;\n      }\n    }\n\n    // if the path is allowed to go above the root, restore leading ..s\n    if (!mustEndAbs && !removeAllDots) {\n      for (; up--; up) {\n        srcPath.unshift('..');\n      }\n    }\n\n    if (mustEndAbs && srcPath[0] !== '' &&\n        (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n      srcPath.unshift('');\n    }\n\n    if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n      srcPath.push('');\n    }\n\n    var isAbsolute = srcPath[0] === '' ||\n        (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n    // put the host back\n    if (psychotic) {\n      result.hostname = result.host = isAbsolute ? '' :\n                                      srcPath.length ? srcPath.shift() : '';\n      //occationaly the auth can get stuck only in host\n      //this especialy happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n\n    mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n    if (mustEndAbs && !isAbsolute) {\n      srcPath.unshift('');\n    }\n\n    if (!srcPath.length) {\n      result.pathname = null;\n      result.path = null;\n    } else {\n      result.pathname = srcPath.join('/');\n    }\n\n    //to support request.http\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.auth = relative.auth || result.auth;\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  };\n\n  Url.prototype.parseHost = function() {\n    var host = this.host;\n    var port = portPattern.exec(host);\n    if (port) {\n      port = port[0];\n      if (port !== ':') {\n        this.port = port.substr(1);\n      }\n      host = host.substr(0, host.length - port.length);\n    }\n    if (host) this.hostname = host;\n  };\n\n})();\n",
    "'use strict';\n\nmodule.exports = OmniPath;\n\nvar path        = require('./node/path'),\n    url         = require('./node/url'),\n    util        = require('./util'),\n    querystring = require('querystring'),\n    parts       = ['protocol', 'slashes', 'hostname', 'port', 'host', 'dir', 'base',\n                   'pathname', 'query', 'search', 'path', 'hash'];\n\n/**\n * A parsed URL or file path. This object has the same properties as a parsed URL (via {@link url.parse},\n * plus the properties of a parsed file path (via {@link path.parse}.\n *\n * Parsed URL:  {@link https://nodejs.org/api/url.html#url_url}\n * Parsed Path: {@link https://nodejs.org/api/path.html#path_path_parse_pathstring}\n *\n * @param {string|Url|OmniPath} p         - The file path or URL to parse.\n * @param {PathOptions}         [options] - Options that determine how paths are parsed\n * @constructor\n */\nfunction OmniPath(p, options) {\n  // If it's already an OmniPath, then just clone it as-is\n  if (p instanceof OmniPath) {\n    return p.clone(options);\n  }\n\n  p = util.toString(p);\n  var type = util.getType(p);\n\n  if (type.isUrl) {\n    return new OmniPath.Url(p, options);\n  }\n  else if (type.isWindows) {\n    return new OmniPath.Windows(p, options);\n  }\n  else {\n    return new OmniPath.Posix(p, options);\n  }\n}\n\n// Create fast shortcut methods for the basic type checks\n['isUrl', 'isPosix', 'isWindows'].forEach(function(prop) {\n  OmniPath[prop] = function(p) {\n    if (p instanceof OmniPath) {\n      return p[prop];\n    }\n    return !!util.getType(p)[prop];\n  };\n});\n\n// Create shortcut methods for all OmniPath properties\nutil.props.forEach(function(prop) {\n  if (OmniPath[prop] === undefined) {\n    OmniPath[prop] = function(p, options) {\n      var Class = this;\n      var omniPath = new Class(p, options);\n      return omniPath[prop];\n    };\n  }\n});\n\n/**\n * Returns the directory name of the given path or URL. Like Node's {@link path.dirname}.\n *\n * {@link https://nodejs.org/api/path.html#path_path_dirname_p}\n *\n * @param   {string|Url|OmniPath}  p          - The file path or URL to parse\n * @param   {PathOptions}          [options]  - Options that determine how paths are parsed\n * @returns {string}\n */\nOmniPath.dirname = function(p, options) {\n  var Class = this;\n  var omniPath = new Class(p, options);\n  return omniPath.dirname();\n};\n\n/**\n * Returns the directory name of the given path or URL. Like Node's {@link path.dirname}.\n *\n * {@link https://nodejs.org/api/path.html#path_path_dirname_p}\n *\n * @returns {string}\n */\nOmniPath.prototype.dirname = function() {\n  return this._path.dirname(this.pathname);\n};\n\n/**\n * Returns the last portion of the given path or URL. Like Node's {@link path.basename}.\n *\n * {@link https://nodejs.org/api/path.html#path_path_basename_p_ext}\n *\n * @param   {string|Url|OmniPath}  p          - The file path or URL to parse\n * @param   {string}               [ext]      - The portion of the file extension to leave off\n * @param   {PathOptions}          [options]  - Options that determine how paths are parsed\n * @returns {string}\n */\nOmniPath.basename = function(p, ext, options) {\n  if (typeof(ext) === 'object') {\n    options = ext;\n    ext = undefined;\n  }\n  var Class = this;\n  var omniPath = new Class(p, options);\n  return omniPath.basename(ext);\n};\n\n/**\n * Returns the last portion of the given path or URL. Like Node's {@link path.basename}.\n *\n * {@link https://nodejs.org/api/path.html#path_path_basename_p_ext}\n *\n * @param   {string} [ext] - The portion of the file extension to leave off\n * @returns {string}\n */\nOmniPath.prototype.basename = function(ext) {\n  return this._path.basename(this.base, ext);\n};\n\n/**\n * Returns the extension of the given path or URL. Like Node's {@link path.extname}.\n *\n * {@link https://nodejs.org/api/path.html#path_path_extname_p}\n *\n * @param   {string|Url|OmniPath}  p          - The file path or URL to parse\n * @param   {PathOptions}          [options]  - Options that determine how paths are parsed\n * @returns {string}\n */\nOmniPath.extname = OmniPath.ext;\n\n/**\n * Returns the extension of the given path or URL. Like Node's {@link path.extname}.\n *\n * {@link https://nodejs.org/api/path.html#path_path_extname_p}\n *\n * @returns {string}\n */\nOmniPath.prototype.extname = function() {\n  return this.ext;\n};\n\n/**\n * Joins all arguments together, and normalizes the resulting path. Like Node's {@link path.join}.\n *\n * {@link https://nodejs.org/api/path.html#path_path_join_path1_path2}\n *\n * @param   {...string|...Url|...OmniPath}  p         - The paths (or segments) to join\n * @param   {PathOptions}                   [options] - Options that determine how paths are parsed\n * @returns {string}\n * @abstract\n */\nOmniPath.join = function(p, options) {\n  return callSubclassMethod('join', arguments);\n};\n\n/**\n * Joins all arguments to this path, and normalizes the resulting path. Like Node's {@link path.join}.\n *\n * {@link https://nodejs.org/api/path.html#path_path_join_path1_path2}\n *\n * @param   {...string|...Url|...OmniPath}  p       - The paths (or segments) to join to this path\n * @param   {PathOptions}                   options - Options that determine how paths are parsed\n * @returns {string}\n */\nOmniPath.prototype.join = function(p, options) {\n  var args = [this].concat(Array.prototype.slice.call(arguments));\n  var parsed = util.fastParse(args, false, true);\n  var joined = this._path.join.apply(this._path, parsed.pathnames);\n\n  // If the last segment has a query/hash, then append it\n  var lastSearch = parsed.searches[parsed.last];\n  var lastHash = parsed.hashes[parsed.last];\n  return joined + lastSearch + lastHash;\n};\n\n/**\n * Resolves `to` to an absolute path. Like Node's {@link path.resolve} or {@link url.resolve}.\n *\n * path.resolve: {@link https://nodejs.org/api/path.html#path_path_resolve_from_to}\n * url.resolve {@link https://nodejs.org/api/url.html#url_url_resolve_from_to}\n *\n * @param   {string|Url|OmniPath}           from    - The file path or URL to resolve from.\n * @param   {...string|...Url|...OmniPath}  to      - The path(s) to resolve, relative to `from`.\n * @param   {PathOptions}                   options - Options that determine how paths are parsed\n * @returns {string}\n */\nOmniPath.resolve = function(from, to, options) {\n  return callSubclassMethod('resolve', arguments);\n};\n\n/**\n * Resolves `to` to an absolute path. Like Node's {@link path.resolve} or {@link url.resolve}.\n *\n * path.resolve:  {@link https://nodejs.org/api/path.html#path_path_resolve_from_to}\n * url.resolve    {@link https://nodejs.org/api/url.html#url_url_resolve_from_to}\n *\n * @param   {...string|...Url|...OmniPath}  to      - The path(s) to resolve, relative to this one.\n * @param   {PathOptions}                   options - Options that determine how paths are parsed\n * @returns {string}\n */\nOmniPath.prototype.resolve = function(to, options) {\n  var args = [this].concat(Array.prototype.slice.call(arguments));\n  var parsed = util.fastParse(args);\n  var pathnames = parsed.pathnames;\n\n  if (parsed.hasUrls) {\n    // If any of the paths are URLs, then use URL-resolving logic\n    return OmniPath.Url.resolve.apply(OmniPath.Url, parsed.hrefs);\n  }\n\n  if (process.browser) {\n    // Use OmniPath.cwd() instead of Browserify's process.cwd() (which is always \"/\")\n    pathnames = [OmniPath.cwd()].concat(parsed.pathnames);\n  }\n\n  // Resolve the path\n  var resolved = this._path.resolve.apply(this._path, pathnames);\n\n  // Resolve the search and hash\n  var search = '', hash = '';\n  for (var i = 0; i <= parsed.last; i++) {\n    if (parsed.searches[i]) {\n      search = parsed.searches[i];\n      hash = parsed.hashes[i];\n    }\n    else if (parsed.hashes[i]) {\n      hash = parsed.hashes[i];\n    }\n  }\n\n  return resolved + search + hash;\n};\n\n/**\n * Normalizes a path, resolving any \".\" and \"..\" segments, eliminating redundant slashes,\n * and standardizing slashes. Like Node's {@link path.normalize}.\n *\n * {@link https://nodejs.org/api/path.html#path_path_normalize_p}\n *\n * @param   {string|Url|OmniPath}   p         - The file path or URL to format\n * @param   {PathOptions}           [options] - Options that determine how paths are parsed\n * @returns {string}\n */\nOmniPath.normalize = function(p, options) {\n  var Class = this;\n  return new Class(p, options).normalize();\n};\n\n/**\n * Normalizes the path, resolving any \".\" and \"..\" segments, eliminating redundant slashes,\n * and standardizing slashes. Like Node's {@link path.normalize}.\n *\n * {@link https://nodejs.org/api/path.html#path_path_normalize_p}\n *\n * @returns {string}\n */\nOmniPath.prototype.normalize = function() {\n  var formatted = this.pathname || this._path.format(this);\n  var normalized = this._path.normalize(formatted);\n  var searchAndHash = this._getFormattedSearchAndHash();\n  return normalized + searchAndHash;\n};\n\n/**\n * Returns the given path or URL as a formatted string. Like Node's {@link path.format} or {@link url.format}.\n *\n * path.format: {@link https://nodejs.org/api/path.html#path_path_format_pathobject}\n * url.format:  {@link https://nodejs.org/api/url.html#url_url_format_urlobj}\n *\n * @param   {string|Url|OmniPath}   p         - The file path or URL to format\n * @param   {PathOptions}           [options] - Options that determine how paths are parsed\n * @returns {string}\n */\nOmniPath.format = function(p, options) {\n  var Class = this;\n  return new Class(p, options).format();\n};\n\n/**\n * Returns the formatted path or URL string. Like Node's {@link path.format} or {@link url.format}.\n *\n * path.format: {@link https://nodejs.org/api/path.html#path_path_format_pathobject}\n * url.format:  {@link https://nodejs.org/api/url.html#url_url_format_urlobj}\n *\n * @returns {string}\n */\nOmniPath.prototype.format = function() {\n  var pathname = this._path.format(this);\n  var searchAndHash = this._getFormattedSearchAndHash();\n  return pathname + searchAndHash;\n};\n\n/**\n * Returns the specified part(s) of the given path or URL as a formatted string.\n *\n * @param   {string|Url|OmniPath}   p\n * - The file path or URL to format\n *\n * @param   {string} part\n * - The name of the rightmost part to include in the returned string.\n * For example, \"protocol\" will only return the protocol part,\n * whereas \"port\" will return the protocol, slashes, auth, hostname, and port.\n *\n * @param   {PathOptions} [options]\n * - Options that determine how paths are parsed\n *\n * @returns {string}\n */\nOmniPath.formatPart = function(p, part, options) {\n  var Class = this;\n  return new Class(p, options).formatPart(part);\n};\n\n/**\n * Returns the specified part(s) of the path or URL as a formatted string.\n *\n * @param   {string} part\n * - The name of the rightmost part to include in the returned string.\n * For example, \"protocol\" will only return the protocol part,\n * whereas \"port\" will return the protocol, slashes, auth, hostname, and port.\n *\n * @returns {string}\n */\nOmniPath.prototype.formatPart = function(part) {\n  part = parts.indexOf(part);\n  var clone = this.clone();\n  part < 0 && (clone.protocol = '');\n  part < 1 && (clone.slashes = false);\n  part < 2 && (clone.hostname = '');\n  part < 3 && (clone.port = '');\n  part < 4 && (clone.host = '');\n  part < 5 && (clone.dir = '');\n  part < 6 && (clone.base = '');\n  part < 7 && (clone.pathname = '');\n  part < 8 && (clone.query = '');\n  part < 9 && (clone.search = '');\n  part < 10 && (clone.path = '');\n  part < 11 && (clone.hash = '');\n  return clone.format();\n};\n\n/**\n * Returns the formatted path or URL string, by calling {@link OmniPath#format}.\n *\n * @type {Function}\n */\nOmniPath.prototype.toString = OmniPath.prototype.format;\n\n/**\n * Returns the primitive string value, by calling {@link OmniPath#format}.\n *\n * @type {Function}\n */\nOmniPath.prototype.valueOf = OmniPath.prototype.format;\n\n/**\n * Returns the given path or URL as a {@link Url} object. File paths will be returned as \"file://\" URLs.\n *\n * @param   {string|Url|OmniPath}   p         - The file path or URL to format\n * @param   {PathOptions}           [options] - Options that determine how paths are parsed\n * @returns {Url}\n */\nOmniPath.toUrl = function(p, options) {\n  var Class = this;\n  return new Class(p, options).toUrl();\n};\n\n/**\n * Returns the path or URL as a {@link Url} object. If {@link OmniPath#isFS} is true,\n * then the returned value will be a \"file://\" URL.\n *\n * @returns {Url}\n */\nOmniPath.prototype.toUrl = function() {\n  return url.parse(this.toUrlString(), true);\n};\n\n/**\n * Returns the given path or URL to a formatted URL string. File paths will be returned as \"file://\" URLs.\n *\n * @param   {string|Url|OmniPath}   p         - The file path or URL to format\n * @param   {PathOptions}           [options] - Options that determine how paths are parsed\n * @returns {string}\n */\nOmniPath.toUrlString = function(p, options) {\n  var Class = this;\n  return new Class(p, options).toUrlString();\n};\n\n/**\n * Returns a formatted URL string. If {@link OmniPath#isFS} is true, then the returned value\n * will be a \"file://\" URL.\n *\n * @returns {string}\n */\nOmniPath.prototype.toUrlString = function() {\n  var hostname = this.hostname;\n  var pathname = this.pathname;\n  var search = this.search;\n  var hash = this.hash;\n\n  // Encode backslash characters\n  pathname = pathname.replace(util.backslashPattern, '%5C');\n  search = search.replace(util.backslashPattern, '%5C');\n  hash = hash.replace(util.backslashPattern, '%5C');\n\n  // Format the file path as a URL\n  var formatted = url.format({\n    protocol: 'file:',\n    slashes: true,\n    hostname: hostname,\n    pathname: pathname,\n    search: search,\n    hash: hash\n  });\n\n  // Parse the formatted URL, to encode any special characters\n  var parsed = url.parse(formatted);\n\n  // Re-format the URL, this time with encoding\n  //noinspection UnnecessaryLocalVariableJS\n  var encoded = parsed.format();\n  return encoded;\n};\n\n/**\n * Returns the current working directory. If running in a web browser, then the working directory\n * is based on the current page's URL.\n *\n * The returned path always includes a trailing slash, which ensures that it behaves properly\n * with methods like {@link url.resolve}.\n *\n * @returns {string}\n */\nOmniPath.cwd = function() {\n  if (process.browser) {\n    var u = new OmniPath.Url(window.location.href);\n    var dir = u.formatPart('dir');\n    if (dir.substr(-1) !== OmniPath.Url.sep) {\n      dir += OmniPath.Url.sep;\n    }\n    return dir;\n  }\n  else {\n    return process.cwd() + path.sep;\n  }\n};\n\n/**\n * Parses the given path or URL, and returns a {@link OmniPath} object. Like Node's\n * {@link path.parse} and {@link url.parse}.\n *\n * path.parse: {@link https://nodejs.org/api/path.html#path_path_parse_pathstring}\n * url.parse:  {@link https://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost}\n *\n * @param   {string|Url|OmniPath}   p         - The file path or URL to parse\n * @param   {PathOptions}           [options] - Options that determine how paths are parsed\n * @returns {OmniPath}\n */\nOmniPath.parse = function(p, options) {\n  var Class = this;\n  // jscs:disable jsDoc\n  return new Class(p, options);\n  // jscs:enable jsDoc\n};\n\n/**\n * Parses the given path or URL, and sets the corresponding properties of this {@link OmniPath} object.\n * Like Node's {@link path.parse} and {@link url.parse}.\n *\n * path.parse: {@link https://nodejs.org/api/path.html#path_path_parse_pathstring}\n * url.parse:  {@link https://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost}\n *\n * @param   {string|Url|OmniPath}   p         - The file path or URL to parse\n * @param   {PathOptions}           [options] - Options that determine how paths are parsed\n * @abstract\n */\nOmniPath.prototype.parse = function(p, options) {\n  // If the path is already parsed, then just copy it\n  if (p instanceof this.constructor) {\n    util.copy(p, this);\n    this._options = options || p._options || this._options;\n    return;\n  }\n\n  // Reset everything\n  this.isUrl = false;\n  this.isFS = false;\n  this.isPosix = false;\n  this.isWindows = false;\n  this.isUnc = false;\n  this.isAbsolute = false;\n  this.sep = '';\n  this.delimiter = '';\n  this.href = '';\n  this.protocol = '';\n  this.slashes = false;\n  this.auth = '';\n  this.host = '';\n  this.hostname = '';\n  this.port = '';\n  this.path = '';\n  this.pathname = '';\n  this.root = '';\n  this.dir = '';\n  this.base = '';\n  this.name = '';\n  this.ext = '';\n  this.search = '';\n  this.query = {};\n  this.hash = '';\n\n  /** @protected */\n  this._options = options || this._options || (p && p._options);\n\n  // Return the path to be parsed by an OmniPath subclass\n  return util.toString(p);\n};\n\n/**\n * Returns a POJO (plain old JavaScript object) for serialization as JSON.\n *\n * @returns {object}\n */\nOmniPath.prototype.toJSON = function() {\n  var json = {};\n  for (var i = 0; i < util.props.length; i++) {\n    var prop = util.props[i];\n    json[prop] = this[prop];\n  }\n  return json;\n};\n\n/**\n * Creates a clone of this {@link OmniPath} object.\n *\n * @param {PathOptions} [options] - Options that determine how paths are parsed\n * @returns {OmniPath}\n */\nOmniPath.prototype.clone = function(options) {\n  var Class = this.constructor;\n  // jscs:disable jsDoc\n  return new Class(this, options);\n  // jscs:enable jsDoc\n};\n\n/**\n * Returns the formatted {@link OmniPath#search} and {@link OmniPath#hash}.\n * If {@link OmniPath#search} is empty, then {@link OmniPath#query} is used instead.\n *\n * @returns {string}\n * @private\n */\nOmniPath.prototype._getFormattedSearchAndHash = function() {\n  var search = this.search || '';\n  var hash = this.hash || '';\n\n  if (search) {\n    if (search[0] !== '?') {\n      search = '?' + search;\n    }\n  }\n  else if (this.query) {\n    // Build the `search` property from the `query` property\n    var query = querystring.stringify(this.query);\n    if (query) {\n      search = '?' + query;\n    }\n  }\n\n  // If the file has a hash, then format the `hash` property\n  if (hash && hash[0] !== '#') {\n    hash = '#' + hash;\n  }\n\n  return search + hash;\n};\n\n/**\n * Passes the given arguments to the specified method of an {@link OmniPath} subclass,\n * based on the first argument's type.\n *\n * @param {string} method - The method to call\n * @param {Arguments} args - The arguments to pass to the method\n */\nfunction callSubclassMethod(method, args) {\n  var type = util.getType(args[0]);\n  if (type.isUrl) {\n    return OmniPath.Url[method].apply(OmniPath.Url, args);\n  }\n  else if (type.isWindows) {\n    return OmniPath.Windows[method].apply(OmniPath.Windows, args);\n  }\n  else {\n    return OmniPath.Posix[method].apply(OmniPath.Posix, args);\n  }\n}\n",
    "'use strict';\n\nmodule.exports = OmniPosix;\n\nvar posix    = require('./node/path').posix,\n    OmniPath = require('./index'),\n    util     = require('./util');\n\n/**\n * An {@link OmniPath} subclass that always treats paths as POSIX paths.\n *\n * @constructor\n */\nfunction OmniPosix(p, options) {\n  if (!(this instanceof OmniPosix)) {\n    throw new TypeError('Use the \"new\" keyword when creating an instance of OmniPath.Posix');\n  }\n\n  this._path = posix;\n  this.parse(p, options);\n}\n\nutil.inherits(OmniPosix, OmniPath);\nOmniPosix.sep = posix.sep;\nOmniPosix.delimiter = posix.delimiter;\n\n// Override the basic type checks\nOmniPosix.isUrl = function() {return false;};\nOmniPosix.isPosix = function() {return true;};\nOmniPosix.isWindows = function() {return false;};\n\n/**\n * Parses the given path as a POSIX path, and sets the corresponding properties of this {@link OmniPosix} object.\n *\n * @param   {string|Url|OmniPosix}  p         - The file path or URL to parse\n * @param   {PathOptions}           [options] - Options that determine how paths are parsed\n */\nOmniPosix.prototype.parse = function(p, options) {\n  p = OmniPath.prototype.parse.apply(this, arguments);\n  if (typeof(p) === 'string') {\n    var split = util.parsePath(p, this._options);\n    var parsed = posix.parse(split.pathname);\n\n    this.isFS = true;\n    this.isPosix = true;\n    this.isAbsolute = posix.isAbsolute(split.pathname);\n    this.sep = posix.sep;\n    this.delimiter = posix.delimiter;\n    this.href = p;\n    this.path = split.pathname + split.search;\n    this.pathname = split.pathname;\n    this.root = parsed.root;\n    this.dir = parsed.dir;\n    this.base = parsed.base;\n    this.name = parsed.name;\n    this.ext = parsed.ext;\n    this.search = split.search;\n    this.query = split.query;\n    this.hash = split.hash;\n  }\n  return this;\n};\n\n/**\n * Joins all arguments together, and normalizes the resulting path.\n *\n * @param   {...string|...Url|...OmniPath}  p         - The paths (or segments) to join\n * @param   {PathOptions}                   [options] - Options that determine how paths are parsed\n * @returns {string}\n */\nOmniPosix.join = function(p, options) {\n  return OmniPath.prototype.join.apply({_path: posix, href: ''}, arguments);\n};\n\n/**\n * Resolves `to` to an absolute path.\n *\n * @param   {string|Url|OmniPath} from    - The file path or URL to resolve from.\n * @param   {string|Url|OmniPath} to      - The file path or URL to resolve, relative to `from`.\n * @param   {PathOptions}         options - Options that determine how paths are parsed\n * @returns {string}\n */\nOmniPosix.resolve = function(from, to, options) {\n  return OmniPath.prototype.resolve.apply({_path: posix, href: ''}, arguments);\n};\n\n/**\n * Returns the current working directory, formatted as a POSIX path.\n *\n * @returns {string}\n */\nOmniPosix.cwd = function() {\n  var cwd = OmniPath.cwd();\n  return posix.normalize(cwd);\n};\n",
    "'use strict';\n\nmodule.exports = OmniUrl;\n\nvar posix                = require('./node/path').posix,\n    url                  = require('./node/url'),\n    OmniPath             = require('./omni-path'),\n    util                 = require('./util'),\n    slashesPattern       = /^\\/*/,\n    looseProtocolPattern = /^[a-z0-9.+-]+:/i;\n\n/**\n * An {@link OmniPath} subclass that always treats paths as URLs.\n *\n * @constructor\n */\nfunction OmniUrl(p, options) {\n  if (!(this instanceof OmniUrl)) {\n    throw new TypeError('Use the \"new\" keyword when creating an instance of OmniPath.Url');\n  }\n\n  this._path = posix;\n  this.parse(p, options);\n}\n\nutil.inherits(OmniUrl, OmniPath);\nOmniUrl.sep = posix.sep;\n\n// Override the basic type checks\nOmniUrl.isUrl = function() {return true;};\nOmniUrl.isPosix = function() {return false;};\nOmniUrl.isWindows = function() {return false;};\n\n/**\n * Parses the given path as a URL, and sets the corresponding properties of this {@link OmniUrl} object.\n *\n * @param   {string|Url|OmniUrl}  p         - The file path or URL to parse\n * @param   {PathOptions}         [options] - Options that determine how paths are parsed\n */\nOmniUrl.prototype.parse = function(p, options) {\n  p = OmniPath.prototype.parse.apply(this, arguments);\n  if (typeof(p) === 'string') {\n    var parsedUrl = url.parse(p, true);\n    var parsedPath = posix.parse(parsedUrl.pathname || '');\n\n    this.isUrl = true;\n    this.isAbsolute = !!parsedUrl.protocol || !!parsedUrl.host || posix.isAbsolute(parsedUrl.pathname || '');\n    this.sep = posix.sep;\n    this.href = parsedUrl.href || '';\n    this.protocol = parsedUrl.protocol || '';\n    this.slashes = parsedUrl.slashes || false;\n    this.auth = parsedUrl.auth || '';\n    this.host = parsedUrl.host || '';\n    this.hostname = parsedUrl.hostname || '';\n    this.port = parsedUrl.port || '';\n    this.path = parsedUrl.path || '';\n    this.pathname = parsedUrl.pathname || '';\n    this.root = parsedPath.root;\n    this.dir = parsedPath.dir;\n    this.base = parsedPath.base;\n    this.name = parsedPath.name;\n    this.ext = parsedPath.ext;\n    this.search = parsedUrl.search || '';\n    this.query = parsedUrl.query || {};\n    this.hash = parsedUrl.hash || '';\n  }\n  return this;\n};\n\n/**\n * Normalizes the URL, resolving any \".\" and \"..\" segments, eliminating redundant slashes,\n * and standardizing slashes.\n *\n * @returns {string}\n */\nOmniUrl.prototype.normalize = function() {\n  var formatted = this.pathname || this._getFormattedPathname();\n  var normalized = posix.normalize(formatted);\n\n  var pathnameIsBlank = false;\n  if (normalized === '.') {\n    // Special case for URLs without a pathname\n    normalized = '';\n    pathnameIsBlank = true;\n  }\n\n  var clone = this.clone();\n  clone.pathname = normalized;\n  formatted = url.format(clone);\n\n  if (formatted === '' && pathnameIsBlank) {\n    // Special case for URLs that resolve to cwd (\"\", \".\", \"././.\", etc.)\n    return '.';\n  }\n  else {\n    return formatted;\n  }\n};\n\n/**\n * Returns the formatted path or URL string.\n *\n * @returns {string}\n */\nOmniUrl.prototype.format = function() {\n  var clone = this.clone();\n  clone.pathname = this._getFormattedPathname();\n  return url.format(clone);\n};\n\n/**\n * Returns a formatted URL string.\n *\n * @returns {string}\n */\nOmniUrl.prototype.toUrlString = function() {\n  return url.format(this);\n};\n\n/**\n * Joins all arguments together, and normalizes the resulting path.\n *\n * @param   {...string|...Url|...OmniPath}  p         - The paths (or segments) to join\n * @param   {PathOptions}                   [options] - Options that determine how paths are parsed\n * @returns {string}\n */\nOmniUrl.join = function(p, options) {\n  var parsed = util.fastParse(arguments, true);\n  var joined = parsed.pathnames[0];\n\n  for (var i = 1; i < parsed.pathnames.length; i++) {\n    var segment = parsed.pathnames[i];\n    if (segment) {\n      // Ignore segments that are blank or separators\n      if (segment === posix.sep || segment === '\\\\') {\n        // If the LAST segment is a separator, then it matters\n        if (i === parsed.pathnames.length - 1) {\n          joined += posix.sep;\n        }\n      }\n      else if (util.endsWithAnySeparator(joined) || util.startsWithAnySeparator(segment)) {\n        joined += segment;\n      }\n      else {\n        joined += posix.sep + segment;\n      }\n    }\n  }\n\n  // If the last segment has a query/hash, then append it\n  var lastSearch = parsed.searches[parsed.last];\n  var lastHash = parsed.hashes[parsed.last];\n  joined += lastSearch + lastHash;\n\n  var omniUrl = new OmniUrl(joined);\n  return omniUrl.normalize();\n};\n\n/**\n * Joins all arguments to this path, and normalizes the resulting path.\n *\n * @param   {...string|...Url|...OmniPath}  p         - The paths (or segments) to join\n * @param   {PathOptions}                   [options] - Options that determine how paths are parsed\n * @returns {string}\n */\nOmniUrl.prototype.join = function(p, options) {\n  return OmniUrl.join.apply(OmniUrl, [this].concat(Array.prototype.slice.call(arguments)));\n};\n\n/**\n * Resolves `to` to an absolute path.\n *\n * @param   {string|Url|OmniPath} from    - The file path or URL to resolve from.\n * @param   {string|Url|OmniPath} to      - The file path or URL to resolve, relative to `from`.\n * @param   {PathOptions}         options - Options that determine how paths are parsed\n * @returns {string}\n */\nOmniUrl.resolve = function(from, to, options) {\n  var args = util.getArgs(arguments);\n  var paths = args.paths;\n  to = util.toString(paths[paths.length - 1]);\n\n  for (var i = paths.length - 2; i >= 0; i--) {\n    from = util.toString(paths[i]);\n    to = url.resolve(from, to);\n\n    if (looseProtocolPattern.test(to)) {\n      // We have an absolute path, so no need to continue processing\n      return to;\n    }\n  }\n\n  return url.resolve(OmniPath.cwd(), to);\n};\n\n/**\n * Resolves `to` to an absolute path. Like Node's {@link path.resolve} or {@link url.resolve}.\n *\n * @param   {...string|...Url|...OmniPath}  to      - The path(s) to resolve, relative to this one.\n * @param   {PathOptions}                   options - Options that determine how paths are parsed\n * @returns {string}\n */\nOmniUrl.prototype.resolve = function(to, options) {\n  return OmniUrl.resolve.apply(OmniUrl, [this].concat(Array.prototype.slice.call(arguments)));\n};\n\n/**\n * Returns the current working directory, formatted as a URL.\n *\n * @returns {string}\n */\nOmniUrl.cwd = function() {\n  var cwd = OmniPath.cwd();\n  return OmniUrl.normalize(cwd);\n};\n\n/**\n * Returns the formatted pathname by combining {@link OmniUrl#dir} and {@link OmniUrl#base}.\n *\n * @returns {string}\n * @private\n */\nOmniUrl.prototype._getFormattedPathname = function() {\n  var pathname = this.pathname;\n\n  if (this.dir || this.base) {\n    var oldPathname = pathname;\n\n    if (this.dir === this.sep) {\n      // Special case for root paths, to match `url.format()` behavior\n      var slashes = slashesPattern.exec(this.pathname) || [''];\n      pathname = slashes[0] + this.base;\n    }\n    else {\n      pathname = posix.format(this);\n    }\n\n    // Maintain any trailing slash on the pathname, for consistency with Node's \"url\" module\n    if (util.endsWithAnySeparator(oldPathname) && !util.endsWithAnySeparator(pathname)) {\n      pathname += posix.sep;\n    }\n  }\n\n  return pathname;\n};\n",
    "'use strict';\n\nmodule.exports = OmniWindows;\n\nvar win32           = require('./node/path').win32,\n    OmniPath        = require('./index'),\n    util            = require('./util'),\n    uncPattern      = /^[\\\\\\/]{2}([^\\\\\\/]+)[\\\\\\/]+[^\\\\\\/]+/, // This matches Node 0.12.7\n    splitUncPattern = /^\\/+([^\\/]+)(.*)/;\n\n/**\n * An {@link OmniPath} subclass that always treats paths as Windows paths.\n *\n * @constructor\n */\nfunction OmniWindows(p, options) {\n  if (!(this instanceof OmniWindows)) {\n    throw new TypeError('Use the \"new\" keyword when creating an instance of OmniPath.Windows');\n  }\n\n  this._path = win32;\n  this.parse(p, options);\n}\n\nutil.inherits(OmniWindows, OmniPath);\nOmniWindows.sep = win32.sep;\nOmniWindows.delimiter = win32.delimiter;\n\n// Override the basic type checks\nOmniWindows.isUrl = function() {return false;};\nOmniWindows.isPosix = function() {return false;};\nOmniWindows.isWindows = function() {return true;};\n\n/**\n * Parses the given path as a WINDOWS path, and sets the corresponding properties of this {@link OmniWindows} object.\n *\n * @param   {string|Url|OmniWindows}  p         - The file path or URL to parse\n * @param   {PathOptions}             [options] - Options that determine how paths are parsed\n */\nOmniWindows.prototype.parse = function(p, options) {\n  p = OmniPath.prototype.parse.apply(this, arguments);\n  if (typeof(p) === 'string') {\n    var split = util.parsePath(p, this._options);\n    var parsed = win32.parse(split.pathname);\n    var unc = uncPattern.exec(split.pathname);\n\n    this.isFS = true;\n    this.isWindows = true;\n    this.isAbsolute = win32.isAbsolute(split.pathname);\n    this.isUnc = !!unc;\n    this.sep = win32.sep;\n    this.delimiter = win32.delimiter;\n    this.href = p;\n    this.path = split.pathname + split.search;\n    this.pathname = split.pathname;\n    this.root = parsed.root;\n    this.dir = parsed.dir;\n    this.base = parsed.base;\n    this.name = parsed.name;\n    this.ext = parsed.ext;\n    this.search = split.search;\n    this.query = split.query;\n    this.hash = split.hash;\n\n    if (this.isUnc) {\n      // Set the UNC host\n      this.host = this.hostname = unc[1];\n    }\n  }\n  return this;\n};\n\n/**\n * Returns the formatted path or URL string.\n *\n * @returns {string}\n */\nOmniWindows.prototype.format = function() {\n  if (this.isUnc && (this.host || this.hostname) && !this.dir && !this.base) {\n    // Special case for UNCs with only a host\n    return '\\\\\\\\' + (this.hostname || this.host);\n  }\n  return OmniPath.prototype.format.apply(this, arguments);\n};\n\n/**\n * Returns a formatted URL string.\n *\n * @returns {string}\n */\nOmniWindows.prototype.toUrlString = function() {\n  var clone = this.clone();\n\n  // Convert Windows path separators to forward slashes\n  clone.pathname = clone.pathname.replace(util.backslashPattern, '/');\n\n  if (this.isUnc) {\n    var split = splitUncPattern.exec(clone.pathname);\n    if (split) {\n      clone.hostname = split[1];\n      clone.pathname = split[2] || '/';\n    }\n  }\n\n  return OmniPath.prototype.toUrlString.apply(clone, arguments);\n};\n\n/**\n * Joins all arguments together, and normalizes the resulting path.\n *\n * @param   {...string|...Url|...OmniPath}  p         - The paths (or segments) to join\n * @param   {PathOptions}                   [options] - Options that determine how paths are parsed\n * @returns {string}\n */\nOmniWindows.join = function(p, options) {\n  return OmniPath.prototype.join.apply({_path: win32, href: ''}, arguments);\n};\n\n/**\n * Resolves `to` to an absolute path.\n *\n * @param   {string|Url|OmniPath} from    - The file path or URL to resolve from.\n * @param   {string|Url|OmniPath} to      - The file path or URL to resolve, relative to `from`.\n * @param   {PathOptions}         options - Options that determine how paths are parsed\n * @returns {string}\n */\nOmniWindows.resolve = function(from, to, options) {\n  return OmniPath.prototype.resolve.apply({_path: win32, href: ''}, arguments);\n};\n\n/**\n * Returns the current working directory, formatted as a Windows path.\n *\n * @returns {string}\n */\nOmniWindows.cwd = function() {\n  var cwd = OmniPath.cwd();\n  return win32.normalize(cwd);\n};\n",
    "'use strict';\n\nvar util = module.exports = {\n  props: [\n    'isUrl', 'isFS', 'isPosix', 'isWindows', 'isUnc', 'isAbsolute', 'sep', 'delimiter',\n    'href', 'protocol', 'slashes', 'auth', 'host', 'hostname', 'port', 'path', 'pathname',\n    'root', 'dir', 'base', 'name', 'ext', 'search', 'query', 'hash'\n  ],\n  backslashPattern: /\\\\/g,\n  isString: isString,\n  isObject: isObject,\n  isNull: isNull,\n  isNullOrUndefined: isNullOrUndefined,\n  toString: toString,\n  inherits: inherits,\n  copy: copy,\n  getType: getType,\n  parsePath: parsePath,\n  fastParse: fastParse,\n  getArgs: getArgs,\n  startsWithAnySeparator: startsWithAnySeparator,\n  endsWithAnySeparator: endsWithAnySeparator\n};\n\nvar OmniPath        = require('./omni-path'),\n    url             = require('./node/url'),\n    querystring     = require('querystring'),\n    protocolPattern = /^[a-z0-9.+-]+:\\/\\//i;\n\n/**\n * Returns true if the given value is a string.\n *\n * @param {*} arg - The value to check\n * @returns {boolean}\n */\nfunction isString(arg) {\n  return typeof(arg) === 'string';\n}\n\n/**\n * Returns true if the given value is an object.\n *\n * @param {*} arg - The value to check\n * @returns {boolean}\n */\nfunction isObject(arg) {\n  return typeof(arg) === 'object' && arg !== null;\n}\n\n/**\n * Returns true if the given value is null.\n *\n * @param {*} arg - The value to check\n * @returns {boolean}\n */\nfunction isNull(arg) {\n  return arg === null;\n}\n\n/**\n * Returns true if the given value is null or undefined.\n *\n * @param {*} arg - The value to check\n * @returns {boolean}\n */\nfunction isNullOrUndefined(arg) {\n  return arg == null; // jshint ignore:line\n}\n\n/**\n * Returns the given path a a string\n *\n * @param   {string|Url|OmniPath} p - The file path or URL to format.\n * @returns {string}\n */\nfunction toString(p) {\n  if (typeof(p) === 'string') {\n    return p;\n  }\n  else if (p instanceof url.Url) {\n    return p.format();\n  }\n  else if (p instanceof OmniPath) {\n    return p.format();\n  }\n  else if (p && typeof(p.href) === 'string') {\n    return p.href;\n  }\n\n  throw new Error('Expected a file path or URL, but got ' + typeof(p) + ' ' + p);\n}\n\n/**\n * Inherits the static and prototype methods of a superclass on a subclass.\n *\n * @param {Class} Child - The class that inherits from Super\n * @param {Class} Super - The parent class\n */\nfunction inherits(Child, Super) {\n  Child.prototype = Object.create(Super.prototype);\n  Child.prototype.constructor = Child;\n\n  var staticMembers = Object.keys(Super);\n  staticMembers.forEach(function(staticMember) {\n    if (typeof(Super[staticMember]) === 'function') {\n      Child[staticMember] = function() {\n        return Super[staticMember].apply(Child, arguments);\n      };\n    }\n    else {\n      Child[staticMember] = Super[staticMember];\n    }\n  });\n}\n\n/**\n * Copies the properties of one {@link OmniPath} object to another.\n *\n * @param   {OmniPath} src   - The source object, whose properties will be copied\n * @param   {OmniPath} dest  - The destination object, whose properties will be set\n * @returns {OmniPath}\n */\nfunction copy(src, dest) {\n  // Copy all public properties\n  for (var i = 0; i < util.props.length; i++) {\n    var prop = util.props[i];\n    dest[prop] = src[prop];\n  }\n\n  return dest;\n}\n\n/**\n * Determines the type of the given path.\n *\n * @param   {*} p - The path to inspect. Will be coerced to a string if necessary.\n * @returns {object}\n */\nfunction getType(p) {\n  if (p instanceof OmniPath) {\n    return p;\n  }\n  else if (typeof(p) !== 'string') {\n    p = toString(p);\n  }\n\n  // If the path starts with a protocol, then treat it as a URL,\n  // regardless of the runtime environment, and even if the path\n  // could also be a valid filesystem path for the environment.\n  if (protocolPattern.test(p)) {\n    return {isUrl: true};\n  }\n\n  // Parse the path based on the runtime environment\n  if (process.browser) {\n    return {isUrl: true};\n  }\n  else if (process.platform === 'win32') {\n    return {isWindows: true};\n  }\n  else {\n    return {isPosix: true};\n  }\n}\n\n/**\n * Parses the given file path into pathname, search, query, and hash, if the options allow it.\n *\n * @param   {string}          p       - The file path to parse\n * @param   {PathOptions}     options - Options that determine whether queries and hashes are allowed\n * @returns {object}\n */\nfunction parsePath(p, options) {\n  var hash = '', search = '', query = {};\n  options = options || {};\n\n  if (options.allowFileHash) {\n    // Separate the hash from the file path\n    var hashIndex = p.indexOf('#');\n    if (hashIndex >= 0) {\n      hash = p.substr(hashIndex);\n      p = p.substr(0, hashIndex);\n    }\n  }\n\n  if (options.allowFileQuery) {\n    // Separate the query from the file path\n    var queryIndex = p.lastIndexOf('?');\n    if (queryIndex >= 0) {\n      search = p.substr(queryIndex);\n      query = search.substr(1);\n      if (options.parseQueryString || options.parseQueryString === undefined) {\n        query = querystring.parse(query);\n      }\n      p = p.substr(0, queryIndex);\n    }\n  }\n\n  return {\n    pathname: p,\n    search: search,\n    query: query,\n    hash: hash\n  };\n}\n\n/**\n * Performs a fast, minimal parsing of the given path(s).\n *\n * @param   {*[]}     args        - The paths to parse, and possibly a {@link PathOptions} argument\n * @param   {boolean} [isUrl]     - Whether to treat all paths as URLs\n * @param   {boolean} [isFS]      - Whether to treat all paths as filesystem paths\n * @returns {object}\n */\nfunction fastParse(args, isUrl, isFS) {\n  args = getArgs(args);\n  var paths = args.paths;\n  var options = args.options;\n\n  var result = {\n    last: paths.length - 1,\n    hasUrls: false,\n    hrefs: [],\n    pathnames: [],\n    searches: [],\n    hashes: []\n  };\n\n  // Parse each path\n  for (var i = 0; i < paths.length; i++) {\n    var path = paths[i];\n    var href, pathname, search, hash, parsedPath;\n\n    if (path instanceof OmniPath) {\n      // Yay! It's already parsed\n      if (isUrl || path.isUrl) {\n        result.hasUrls = true;\n        href = path.href;\n        pathname = path.formatPart('pathname');\n      }\n      else {\n        href = pathname = path.pathname;\n      }\n      search = path.search;\n      hash = path.hash;\n\n      if (i === 0 && !options) {\n        // If no options are explicitly passed, and the first arg\n        // is an OmniPath, then we can use it's options\n        options = path._options;\n      }\n    }\n    else {\n      href = toString(path);\n\n      if (isUrl || (!isFS && protocolPattern.test(href))) {\n        // It's a URL\n        result.hasUrls = true;\n        parsedPath = parsePath(href, {allowFileQuery: true, allowFileHash: true, parseQueryString: false});\n        pathname = parsedPath.pathname;\n        search = parsedPath.search;\n        hash = parsedPath.hash;\n      }\n      else {\n        // It's a file path\n        if (options) {\n          // Split the pathname from the search/hash\n          parsedPath = parsePath(href,\n            {allowFileQuery: options.allowFileQuery, allowFileHash: options.allowFileHash, parseQueryString: false});\n          pathname = parsedPath.pathname;\n          search = parsedPath.search;\n          hash = parsedPath.hash;\n        }\n        else {\n          // File paths with query/hash aren't supported\n          pathname = href;\n          search = hash = '';\n        }\n      }\n    }\n\n    result.hrefs.push(href);\n    result.pathnames.push(pathname);\n    result.searches.push(search);\n    result.hashes.push(hash);\n  }\n\n  return result;\n}\n\n/**\n * Splits the given argument list into separate arguments.\n *\n * @param   {Arguments} args - The argument list to be split\n * @returns {{paths: Array, options: ?Options}}\n */\nfunction getArgs(args) {\n  var result = {\n    paths: [],\n    options: null\n  };\n\n  if (args && args.length > 0) {\n    var lastArg = args[args.length - 1];\n    if (typeof(lastArg) === 'string' || lastArg instanceof OmniPath || lastArg instanceof url.Url) {\n      // There is no \"options\" argument.  All arguments are paths.\n      result.paths = Array.prototype.slice.call(args);\n    }\n    else {\n      // The last argument is the \"options\" argument.  All others are paths.\n      result.options = lastArg;\n      result.paths = Array.prototype.slice.call(args, 0, args.length - 1);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Determines whether the given path (or segment) begins with a separator character.\n *\n * @param {string} p - A path or segment\n * @returns {boolean}\n */\nfunction startsWithAnySeparator(p) {\n  var firstChar = p[0];\n  return firstChar === '/' || firstChar === '\\\\';\n}\n\n/**\n * Determines whether the given path (or segment) ends with a separator character.\n *\n * @param {string} p - A path or segment\n * @returns {boolean}\n */\nfunction endsWithAnySeparator(p) {\n  var lastChar = p.substr(-1);\n  return lastChar === '/' || lastChar === '\\\\';\n}\n",
    "// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            currentQueue[queueIndex].run();\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n",
    "/*! https://mths.be/punycode v1.3.2 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.3.2',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n",
    "'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n"
  ]
}